from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from states.states import Main_States
from keyboards.kbs import (start_keyboard, get_categories_keyboard, build_expense_keyboard, back_to_expense_kb,
                           build_category_stats_keyboard, build_category_expenses_keyboard, back_to_category_stats_kb)
from database.database import get_user_history, get_monthly_category_stats

router = Router()

@router.callback_query(F.data == "today")
async def add_new_today_expense(callback: CallbackQuery, state: FSMContext) -> None:
    date = callback.message.date.strftime("%d.%m.%Y")
    cat_kb = await get_categories_keyboard(callback.from_user.id, date)

    if cat_kb:
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç—Ä–∞—Ç–∞', reply_markup=cat_kb)
    else:
        await callback.message.answer('–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç, —Å–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                             reply_markup=start_keyboard)

    await callback.message.delete()
    await state.clear()


# –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def open_main_menu(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.delete()
    await callback.message.answer("–û—Ç–∫—Ä—ã—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=start_keyboard)
    await state.clear()


# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç—Ä–∞—Ç–∞
@router.callback_query(F.data.startswith("cat_"))
async def add_new_amount_expense(callback: CallbackQuery, state: FSMContext) -> None:
    info = callback.data.split('_')
    date = info[-1]
    cat = info[-2]
    await callback.message.delete()
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞')
    await state.set_state(Main_States.ADD_EXPENSE_AMOUNT)
    await state.update_data(date=date, category=cat)


# –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç—Ä–∞—Ç–æ–π
@router.callback_query(F.data.startswith("r_"))
async def handle_expense_details(callback: CallbackQuery) -> None:
    try:
        _, date, amount_str, category = callback.data.split("_")
        amount = float(amount_str)
        user_id = callback.from_user.id
        history = await get_user_history(user_id)

        for entry in history:
            if entry[0] == date and float(entry[1]) == amount and entry[2] == category:
                description = entry[3]
                await callback.message.answer(
                    f"üìÖ –î–∞—Ç–∞: {date}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    f"üí∞ –°—É–º–º–∞: {int(amount)}‚ÇΩ\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                    , reply_markup=back_to_expense_kb)
                await callback.message.delete()
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(e)


# –µ—Å–ª–∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥", —Å–º–æ—Ç—Ä—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–∞—Ç—É
@router.callback_query(F.data == "back_to_expenses")
async def show_all_expenses(callback: CallbackQuery) -> None:
    res = await get_user_history(callback.from_user.id)
    expenses_kb = build_expense_keyboard(res)
    await callback.message.answer('–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º', reply_markup=expenses_kb)
    await callback.message.delete()


# –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–∏–º —Ç—Ä–∞—Ç—É –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("c_"))
async def show_category_expenses(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    try:
        _, category, month = callback.data.split("_")
        month_str = f"{month[3:]}"
        history = await get_user_history(user_id)

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –º–µ—Å—è—Ü—É
        filtered = [
            entry for entry in history
            if entry[2] == category and entry[0][3:] == month_str
        ]

        if not filtered:
            await callback.message.delete()
            await callback.message.answer("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü.")
            return

        keyboard = build_category_expenses_keyboard(filtered, month_str)

        await callback.message.edit_text(
            f"–¢—Ä–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞ {month_str}",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.delete()
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"[ERROR in show_category_expenses] {e}")


# –µ—Å–ª–∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, —Å–º–æ—Ç—Ä—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—è —Ç—Ä–∞—Ç—É
@router.callback_query(F.data.startswith("back_to_month_"))
async def return_stats_for_cats(callback: CallbackQuery) -> None:
    date = callback.data.split("_")[-1]
    res = await get_monthly_category_stats(callback.from_user.id, date)
    cats_kb = build_category_stats_keyboard(res, date)
    await callback.message.delete()
    await callback.message.answer(f'–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {date}', reply_markup=cats_kb)


# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é—é —Ç—Ä–∞—Ç—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
@router.callback_query(F.data.startswith("exp_"))
async def handle_expense_each_detail(callback: CallbackQuery):
    try:
        _, date, amount_str, desc = callback.data.split("_")
        amount = float(amount_str)
        user_id = callback.from_user.id

        history = await get_user_history(user_id)

        kb = back_to_category_stats_kb(date[3:])

        for entry in history:
            if entry[0] == date and float(entry[1]) == amount and desc.strip() in entry[3]:
                category = entry[2]
                await callback.message.answer(
                    f"üìÖ –î–∞—Ç–∞: {date}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    f"üí∞ –°—É–º–º–∞: {int(amount)}‚ÇΩ\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {entry[3]}",
                    reply_markup=kb
                )
                await callback.message.delete()
                return

        await callback.message.answer("–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb)

    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"[ERROR in handle_expense_each_detail] {e}")